version: '3.8'
services:
  frontend:
    image: ghcr.io/david-dewanto/tubes-lasti-frontend:latest
    container_name: apotek_frontend
    ports:
      - "80:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - apotek_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: apotek_nginx
    ports:
      - "5000:5000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - apotek_network
    restart: unless-stopped

  backend:
    image: ghcr.io/david-dewanto/tubes-lasti-backend:latest
    container_name: apotek_flask
    expose:
      - "5000"
    environment:
      - DATABASE_URL=postgresql://apotek_user:password@postgres:5432/apotek_db
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - SECRET_KEY=your_secret_key_here
      - JWT_SECRET_KEY=your_jwt_secret_here
    volumes:
      - ./backend:/backend
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - apotek_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: apotek_db
    environment:
      - POSTGRES_USER=apotek_user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=apotek_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - apotek_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apotek_user -d apotek_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  apotek_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
