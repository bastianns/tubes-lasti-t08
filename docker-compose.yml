version: '3.8'

services:
<<<<<<< HEAD
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: apotek_frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://backend:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - apotek_network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: apotek_flask
=======
  postgres:
    image: postgres:14
    container_name: apotek_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    container_name: apotek_api
>>>>>>> 989c0d5122d603a11b93acddb0b1ceef50bbbdf3
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
<<<<<<< HEAD
      - SECRET_KEY=your_secret_key_here
      - JWT_SECRET_KEY=your_jwt_secret_here
    volumes:
      - ./backend:/backend
=======
      - DOCKER_ENV=true
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
>>>>>>> 989c0d5122d603a11b93acddb0b1ceef50bbbdf3
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - apotek_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: apotek_db
    environment:
      - POSTGRES_USER=apotek_user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=apotek_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - apotek_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apotek_user -d apotek_db"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  apotek_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local